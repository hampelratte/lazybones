<?xml version="1.0"?>

<project name="LazyBones" default="run" basedir=".">

	<property name="build.properties" value="build.properties"/>
	<property file="${build.properties}"/>
	<fail message="Define property 'tvbrowser.runtime.dir' in ${build.properties} - this should point to directory containing 'tvbrowser.jar' and 'plugins' directory." unless="tvbrowser.runtime.dir" />
	<fail message="Define property 'version' in ${build.properties}" unless="version" />

	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="build.dir" value="build" />
	<property name="license.dir" value="licenses" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="res.dir" value="res" />
	<property name="doc.dir" value="${res.dir}/docs"/>
	<property name="jar.file" value="${tvbrowser.runtime.dir}/plugins/LazyBones.jar"/>
	<property name="nacho" value="nachocalendar-0.22.jar" />
	<property name="xstream" value="xstream-1.2.1.jar" />
	<property name="xpp3" value="xpp3_min-1.1.3.4.O.jar" />
	<property name="lsf4japi" value="slf4j-api-1.5.0.jar" />
	<property name="lsf4jimpl" value="slf4j-jdk14-1.5.0.jar" />
	<property name="svdrp.src.dir" value="../svdrp4j/src/main/java" />


	<target name="compile">
		<mkdir dir="${classes.dir}" />

		<javac srcdir="${svdrp.src.dir}" destdir="${classes.dir}" deprecation="true" debug="true">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="true" debug="true">
			<classpath>
				<pathelement location="${tvbrowser.runtime.dir}/tvbrowser.jar" />
				<pathelement location="${tvbrowser.runtime.dir}/plugins/CapturePlugin.jar" />
				<pathelement location="${classes.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="jar" depends="compile">
		<mkdir dir="${classes.dir}/lazybones" />
		<unjar src="${lib.dir}/${nacho}" dest="${classes.dir}"/>
		<unjar src="${lib.dir}/${xstream}" dest="${classes.dir}"/>
		<unjar src="${lib.dir}/${xpp3}" dest="${classes.dir}"/>
		<unjar src="${lib.dir}/${lsf4japi}" dest="${classes.dir}"/>
		<unjar src="${lib.dir}/${lsf4jimpl}" dest="${classes.dir}"/>
		<copy todir="${classes.dir}/lazybones">
			<fileset dir="${res.dir}/images" includes="*.png"/>
			<fileset dir="${res.dir}/images" includes="*.gif"/>
			<fileset dir="${res.dir}/language" includes="**/*.properties"/>
		</copy>
		<copy todir="${classes.dir}">
			<fileset dir="${license.dir}" includes="**/*.*"/>
		</copy>
		<jar destfile="${jar.file}" basedir="${classes.dir}">
		</jar>
	</target>

	<target name="run" depends="compile,jar" description="Run TV-Browser">
		<java jar="${tvbrowser.runtime.dir}/tvbrowser.jar" dir="${tvbrowser.runtime.dir}" fork="true">
			<jvmarg value="-Djava.util.logging.config.file=${basedir}/logging.properties"/>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7777"/>
		</java>
	</target>

	<target name="run-vdr-local" depends="compile,jar" description="Run TV-Browser configured for a local VDR">
		<java jar="${tvbrowser.runtime.dir}/tvbrowser.jar" dir="${tvbrowser.runtime.dir}" fork="true">
			<jvmarg value="-Duser.home=/home/henni/.tvbrowser-vdr-local"/>
			<jvmarg value="-Dpropertiesfile=${tvbrowser.runtime.dir}/linux.properties"/>
			<jvmarg value="-Djava.util.logging.config.file=${basedir}/logging.properties"/>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7777"/>
		</java>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<target name="dist" depends="jar" description="Make distribution zip">
		<property name="dist-tmp.dir" value="${build.dir}/dist-tmp"/>
		<mkdir dir="${dist-tmp.dir}"/>

		<delete>
			<fileset dir="${build.dir}" includes="*.zip"/>
		</delete>

		<copy file="${jar.file}" todir="${dist-tmp.dir}/LazyBones-${version}/"/>
		<copy todir="${dist-tmp.dir}/LazyBones-${version}">
			<fileset dir="${doc.dir}">
			</fileset>
		</copy>
		<copy todir="${dist-tmp.dir}/LazyBones-${version}/license">
            <fileset dir="${license.dir}">
            </fileset>
        </copy>

		<zip destfile="${build.dir}/LazyBones-${version}.zip" 
	             basedir="${dist-tmp.dir}"/>

		<delete dir="${dist-tmp.dir}"/>
	</target>

</project>
